# –ó–∞–¥–∞–Ω–∏–µ 1 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤)
# –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º (–∞ —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º) –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
# 1) Person (–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞:
# 1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π
# (–æ–¥–Ω–æ –ø–æ–ª–µ, –º—ã –æ–∂–∏–¥–∞–µ–º - —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞ –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª),
# –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç—É,
# 2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).

class Person:

    def __init__(self, full_name="", birth=0):
        # * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,
        # —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 2020 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥ ‚Äì –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö),
        # –Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1900. –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        assert 1900 <= birth <= 2020
        # * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,
        # —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
        assert len(full_name.split()) == 2
        self.birth = birth
        self.full_name = full_name

# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
# 1.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
    def get_name(self):
        return self.full_name.split()[0]

# 2.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
    def get_surname(self):
        return self.full_name.split()[1]
# 3.	–≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ/–µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É,
# –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (obj.age_in(year));
# –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
    def age_in(self, year=2020):
        return(year - self.birth)

    def __str__(self):
        return f"<Person object: {self.full_name} \nBirth {self.birth}>"


# 2) Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
# * (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ üòä

class Employee(Person):

    def __init__(self, full_name="", birth=0, position="", experience=0, salary=0):
        super().__init__(full_name, birth)
        self.experience = experience
        self.position = position
        self.salary = salary

    def __str__(self):
        return f"<Employee object: {self.full_name} \nBirth {self.birth} \n{self.get_position()} \nSalary {self.salary}>"

    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
    # 1.	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã:
    # Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç,
    # Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç,
    # Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç.
    # –¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>.
    # –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É –≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äúprogrammer‚Äù —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞,
    # –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
    def get_position(self):
        if 0 <= self.experience < 3:
            return f"Junior {self.position}"
        elif 3 <= self.experience < 6:
            return f"Middle {self.position}"
        elif self.experience > 6:
            return f"Senior {self.position}"
        else:
            return "Position error"



# 2.	–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
    def bonus_salary(self, bonus=0):
        self.salary += bonus

"""
# 3) ITEmployee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Employee)
"""
"""    —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∫–ª–∞—Å—Å
        –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –∫–ª–∞—Å—Å–∞ Employee
"""
class ITEmployee(Employee):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.skills = []

    def __str__(self):
        return f"<ITEmployee object: {self.full_name} \nBirth {self.birth} \n{self.get_position()} \nSalary {self.salary} \nSkills {self.skills}>"
    """
    # 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skill (—Å–º. –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é)
    """
    """ –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞ """
    def add_skill(self, new_skill):
        self.skills.append(new_skill)
    """
    # 2. * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skills.
    """
    """ –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞ """
    def add_skills(self, new_skills):
        self.skills += new_skills



# –¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω –∏ –æ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞—Å—à–∏—Ä—è–µ—Ç–µ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill, –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏ –≤—Å–µ –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill
# 4) –î–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–¥–µ–ª–∞–π—Ç–µ __str__, —á—Ç–æ–± –æ–±—ä–µ–∫—Ç—ã –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω!


# 5) –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ –∫–ª–∞—Å—Å—É –∏ –∫–æ –≤—Å–µ–º –µ–≥–æ –º–µ—Ç–æ–¥–∞–º!






p1 = Person("John Smith", 1990)
e1 = Employee("Jane Smith", 1990, "Programmer", 2, 500)
i1 = ITEmployee("Jack Smith", 1990, "Programmer", 2, 500)
e1.bonus_salary(33)
print(e1.full_name)
print(e1.birth)
print(e1.position)
print(e1.experience)
print(e1.salary)

print(i1.skills)
i1.add_skill("skill1")
print(i1.skills)
i1.add_skills(["skill2", "skill3"])
print(i1.skills)

print(e1.get_position())

print(p1)
print(e1)
print(i1)

print(i1.get_name())


